[device]                                # general setting section
name = test123               						# name used to refer to this device in the program
label = Test device                     # "label[name]" will be shown as the title in the GUI device frame
hdf_group = test_hdf     				       	# name of the .hdf file group that data from this device will be saved into
driver = driver_test         				   	# name of the driver file and also of the main class in the driver file
constr_params = someParam1, someParam2  # section names in this file whose "value" entry will be passed as arguments to instantiate the driver
slow_data = True                        # True if just tens of data points are returned in a second. Slow/Fast devices are treated differently in Plotter, HDF Writer, etc.
devices_frame_tab = Test                # name of the tab in GUI device frame to put this device
row = 1                                 # position of this device in GUI device frame
column = 2                              # position of this device in GUI device frame
plots_queue_maxlen = 1000               # max length of plot queue, data in which are plotted by Plotter
max_NaN_count = 10                      # max acceptable number of successive NaN in device returned data
meta_device = False                     # True if this device needs information from other devices to run. In this case, 'parent' will be passed to the driver.
compound_dataset = False                # True if different types of data are contained in the return of this device
double_connect_dev = True               # True if it's okay to instantiate this device's driver more than once, which is required by regular workflow.
plots_fn = 2*y                          # a function of y may be used in plotter
scan_params = p1(unit1), p2(unit2)      # acceptable scan parameters for the driver, will also be shown in Sequencer
block_thread = False                    # True if the device can block its thread before recording finishes, e.g. an NI DAQ with wait_until_done() function called. Sequencer will treat it differently.
dtype =                                 # data type of returned data, not needed for double_connect_dev
shape =                                 # shape of returned data, not needed for double_connect_dev

[attributes]														# column names and corresponding units, other attributes are welcome. All attributes will be written into HDF file
column_names = time, voltage
units = s, V

[enabled]																# a checkbox enables/disables this device, this section can't be removed
label = Device enabled
type = QCheckBox
tristate = True
row = 0
col = 0
value = 0

[HDF_enabled]														# a checkbox enables/disables hdf writing for this device, this section can't be removed
label = HDF enabled
type = QCheckBox
row = 1
col = 0
value = 1

[dt]																		# a lineedit specifies (pseudo) loop cycle, this section can't be removed
label = Loop cycle [s]:
type = QLineEdit
row = 2
col = 1
value = 0.2

# user defined section, its value entry will be used to instantiate device driver,
# different type of control has different entries in this section, see DeviceConfig -> read_from_file() and ControlGUI -> place_device_controls() in main.py for details
# currently supported types include QCheckBox, QPushButton, QLineEdit, QComboBox, ControlsRow, ControlsTable_col, ControlsTable_row, QLabel_image, indicator, indicator_button, indicator_lineedit
[someParam1]
label = some parameter1
type = QComboBox
row = 3
col = 1
value = test1
options = test3, test4
command = update_someParam1							# corresponds to a function in the driver file

[someParam2]
label = some parameter2
type = QLineEdit
row = 3
col = 2
value = test2
enter_cmd = update_someParam2						# corresponds to a function in the driver file
tooltip =

.
.
.

# this section specifies whether to enable database InfluxDB for this device.
# Here InfluxDB is not used for data storage but for data plotting later in Grafana
# only slow devices can use InfluxDB
[InfluxDB_enabled]
type = dummy
value = False
